package main

// This short program generates ../capnpstrs.gen.go, which contains a map with
// the contents of the capnproto schema from the sandstorm source tree. This is
// needed when processing sandstorm-pkgdef.capnp, as it will include some subset
// of these files ("package.capnp" at a minimum).
//
// The -sandstorm-src command line argument specifies the location of the
// sandstorm source repository; the schema are pulled from there.

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"strings"
)

var (
	SandstormSrc = flag.String("sandstorm-src", "", "Path to sandstorm source directory")
)

func chkfatal(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {
	flag.Parse()

	fileMap := map[string][]byte{}

	dirPath := *SandstormSrc + "/src/sandstorm"
	fis, err := ioutil.ReadDir(dirPath)
	chkfatal(err)

	outFile, err := os.Create("capnpstrs.gen.go")
	chkfatal(err)
	defer outFile.Close()

	for _, fi := range fis {
		if strings.HasSuffix(fi.Name(), ".capnp") {
			data, err := ioutil.ReadFile(dirPath + "/" + fi.Name())
			chkfatal(err)
			fileMap[fi.Name()] = data
		}
	}
	_, err = fmt.Fprint(outFile, "package main\n"+
		"\n"+
		"// This file was auto-generated by ./internal/gen-schema-strings.go.\n"+
		"// DO NOT EDIT.\n"+
		"\n"+
		"var CapnpFileMap = map[string]string{\n")
	chkfatal(err)
	for k, v := range fileMap {
		_, err = fmt.Fprintf(outFile, "%q: %q,\n", k, v)
		chkfatal(err)
	}
	_, err = fmt.Fprint(outFile, "}\n")
	chkfatal(err)
	chkfatal(outFile.Close())

	chkfatal(exec.Command("gofmt", "-w", "capnpstrs.gen.go").Run())
}
